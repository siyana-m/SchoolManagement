<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AwHB8AP/3/gB/9/8Af/AAAH///8B////g/8=
</value>
  </data>
</root>